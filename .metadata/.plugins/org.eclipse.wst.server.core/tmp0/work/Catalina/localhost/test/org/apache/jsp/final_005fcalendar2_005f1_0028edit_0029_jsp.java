/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.99
 * Generated at: 2025-04-21 08:29:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;

public final class final_005fcalendar2_005f1_0028edit_0029_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // 현재 날짜/시간 정보 가져오기
    Date now = new Date();
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy.MM.dd");
    SimpleDateFormat dayFormat = new SimpleDateFormat("E요일");
    
    String today = dateFormat.format(now);
    String dayOfWeek = dayFormat.format(now);
    
    // 현재 시간 정보
    Calendar cal = Calendar.getInstance();
    int hour = cal.get(Calendar.HOUR_OF_DAY);
    int minute = cal.get(Calendar.MINUTE);
    
    // 시간 반올림 (10분 단위)
    minute = (minute / 10) * 10;
    
    String ampm = hour < 12 ? "오전" : "오후";
    int displayHour = hour % 12;
    if (displayHour == 0) displayHour = 12;
    
    String currentTime = String.format("%s %d:%02d", ampm, displayHour, minute);
    
    // 종료 시간은 1시간 후로 설정
    cal.add(Calendar.HOUR_OF_DAY, 1);
    hour = cal.get(Calendar.HOUR_OF_DAY);
    minute = cal.get(Calendar.MINUTE);
    
    ampm = hour < 12 ? "오전" : "오후";
    displayHour = hour % 12;
    if (displayHour == 0) displayHour = 12;
    
    String endTime = String.format("%s %d:%02d", ampm, displayHour, minute);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>일정 등록</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        * {\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("            font-family: 'Arial', sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("        body {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            background-color: #f5f5f5;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            max-width: 768px;\r\n");
      out.write("            margin: 0 auto;\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            min-height: 100vh;\r\n");
      out.write("        }\r\n");
      out.write("        .header {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            border-bottom: 1px solid #e0e0e0;\r\n");
      out.write("        }\r\n");
      out.write("        .back-button {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            background: none;\r\n");
      out.write("            border: none;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("        .back-button span {\r\n");
      out.write("            margin-left: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        .title {\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("        }\r\n");
      out.write("        .save-button {\r\n");
      out.write("            background-color: #f7f7f7;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 8px 15px;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("        .form-content {\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .form-group {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .color-select {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .color-circle {\r\n");
      out.write("            width: 24px;\r\n");
      out.write("            height: 24px;\r\n");
      out.write("            background-color: #5e72e4;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .input-title {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("            outline: none;\r\n");
      out.write("            border-bottom: 1px solid #e0e0e0;\r\n");
      out.write("        }\r\n");
      out.write("        .date-time {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("        }\r\n");
      out.write("        .date-time-icon {\r\n");
      out.write("            margin-right: 15px;\r\n");
      out.write("        }\r\n");
      out.write("        .date-time-inputs {\r\n");
      out.write("            flex: 1;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            flex-wrap: wrap;\r\n");
      out.write("        }\r\n");
      out.write("        .date-input {\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            border: 1px solid #e0e0e0;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            width: 170px;\r\n");
      out.write("            margin-right: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        .time-wrapper {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("        .ampm-select {\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            border: 1px solid #e0e0e0;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            margin-right: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        .time-input {\r\n");
      out.write("            width: 70px;\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            border: 1px solid #e0e0e0;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        .separator {\r\n");
      out.write("            margin: 0 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .all-day {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin-left: 40px;\r\n");
      out.write("        }\r\n");
      out.write("        .all-day input {\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        .description {\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("        .description textarea {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 150px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #e0e0e0;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            resize: none;\r\n");
      out.write("            outline: none;\r\n");
      out.write("        }\r\n");
      out.write("        .char-count {\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            right: 10px;\r\n");
      out.write("            bottom: 10px;\r\n");
      out.write("            color: #999;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("        }\r\n");
      out.write("        .hashtag-container {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .hashtag-input {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #e0e0e0;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        .hashtag-list {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-wrap: wrap;\r\n");
      out.write("            margin-top: 10px;\r\n");
      out.write("            gap: 8px;\r\n");
      out.write("        }\r\n");
      out.write("        .hashtag {\r\n");
      out.write("            background-color: #e0e0ff;\r\n");
      out.write("            color: #5e72e4;\r\n");
      out.write("            padding: 5px 10px;\r\n");
      out.write("            border-radius: 20px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("        .hashtag .remove {\r\n");
      out.write("            margin-left: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("        }\r\n");
      out.write("        .footer {\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: flex-start;\r\n");
      out.write("            border-top: 1px solid #e0e0e0;\r\n");
      out.write("        }\r\n");
      out.write("        .visily-credit {\r\n");
      out.write("            color: #999;\r\n");
      out.write("            font-size: 12px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"header\">\r\n");
      out.write("            <button type=\"button\" class=\"back-button\" onclick=\"history.back()\">\r\n");
      out.write("                ← <span>일정 등록</span>\r\n");
      out.write("            </button>\r\n");
      out.write("            <button type=\"submit\" class=\"save-button\" form=\"eventForm\">저장</button>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <form id=\"eventForm\" action=\"saveEvent.jsp\" method=\"post\">\r\n");
      out.write("            <div class=\"form-content\">\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <div class=\"color-select\">\r\n");
      out.write("                        <div class=\"color-circle\"></div>\r\n");
      out.write("                        <input type=\"text\" class=\"input-title\" placeholder=\"일정 제목\" id=\"eventTitle\" name=\"eventTitle\" required>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <div class=\"date-time\">\r\n");
      out.write("                        <div class=\"date-time-icon\">\r\n");
      out.write("                            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n");
      out.write("                                <path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"black\" stroke-width=\"2\"/>\r\n");
      out.write("                                <path d=\"M12 6V12L16 14\" stroke=\"black\" stroke-width=\"2\" stroke-linecap=\"round\"/>\r\n");
      out.write("                            </svg>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"date-time-inputs\">\r\n");
      out.write("                            <div style=\"display: flex; align-items: center; margin-bottom: 10px; width: 100%;\">\r\n");
      out.write("                                <input type=\"text\" class=\"date-input\" id=\"startDate\" name=\"startDate\" value=\"");
      out.print( today );
      out.write(' ');
      out.print( dayOfWeek );
      out.write("\" readonly>\r\n");
      out.write("                                <div class=\"time-wrapper\">\r\n");
      out.write("                                    <select class=\"ampm-select\" id=\"startAmPm\" name=\"startAmPm\">\r\n");
      out.write("                                        <option value=\"오전\" ");
      out.print( ampm.equals("오전") ? "selected" : "" );
      out.write(">오전</option>\r\n");
      out.write("                                        <option value=\"오후\" ");
      out.print( ampm.equals("오후") ? "selected" : "" );
      out.write(">오후</option>\r\n");
      out.write("                                    </select>\r\n");
      out.write("                                    <input type=\"text\" class=\"time-input\" id=\"startTime\" name=\"startTime\" value=\"");
      out.print( displayHour );
      out.write(':');
      out.print( String.format("%02d", minute) );
      out.write("\">\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div style=\"width: 100%; display: flex; align-items: center;\">\r\n");
      out.write("                                <span class=\"separator\">~</span>\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div style=\"display: flex; align-items: center; margin-top: 10px; width: 100%;\">\r\n");
      out.write("                                <input type=\"text\" class=\"date-input\" id=\"endDate\" name=\"endDate\" value=\"");
      out.print( today );
      out.write(' ');
      out.print( dayOfWeek );
      out.write("\" readonly>\r\n");
      out.write("                                <div class=\"time-wrapper\">\r\n");
      out.write("                                    <select class=\"ampm-select\" id=\"endAmPm\" name=\"endAmPm\">\r\n");
      out.write("                                        <option value=\"오전\" ");
      out.print( ampm.equals("오전") ? "selected" : "" );
      out.write(">오전</option>\r\n");
      out.write("                                        <option value=\"오후\" ");
      out.print( ampm.equals("오후") ? "selected" : "" );
      out.write(">오후</option>\r\n");
      out.write("                                    </select>\r\n");
      out.write("                                    <input type=\"text\" class=\"time-input\" id=\"endTime\" name=\"endTime\" value=\"");
      out.print( displayHour );
      out.write(':');
      out.print( String.format("%02d", minute) );
      out.write("\">\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"all-day\">\r\n");
      out.write("                        <input type=\"checkbox\" id=\"allDay\" name=\"allDay\">\r\n");
      out.write("                        <label for=\"allDay\">하루 종일</label>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <div class=\"description\">\r\n");
      out.write("                        <textarea id=\"description\" name=\"description\" placeholder=\"설명 추가\"></textarea>\r\n");
      out.write("                        <div class=\"char-count\">0 / 2000</div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <div class=\"hashtag-container\">\r\n");
      out.write("                    <input type=\"text\" class=\"hashtag-input\" id=\"hashtagInput\" placeholder=\"#태그 추가 (엔터키로 구분)\">\r\n");
      out.write("                    <div class=\"hashtag-list\" id=\"hashtagList\"></div>\r\n");
      out.write("                    <input type=\"hidden\" id=\"hashtagValues\" name=\"hashtags\" value=\"\">\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("            // 문자 수 카운트 기능\r\n");
      out.write("            const descriptionTextarea = document.getElementById('description');\r\n");
      out.write("            const charCount = document.querySelector('.char-count');\r\n");
      out.write("            \r\n");
      out.write("            descriptionTextarea.addEventListener('input', function() {\r\n");
      out.write("                const currentLength = this.value.length;\r\n");
      out.write("                charCount.textContent = currentLength + ' / 2000';\r\n");
      out.write("                \r\n");
      out.write("                // 최대 글자수 제한\r\n");
      out.write("                if (currentLength > 2000) {\r\n");
      out.write("                    this.value = this.value.substring(0, 2000);\r\n");
      out.write("                    charCount.textContent = '2000 / 2000';\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // 하루 종일 체크박스 기능\r\n");
      out.write("            const allDayCheckbox = document.getElementById('allDay');\r\n");
      out.write("            const startAmPm = document.getElementById('startAmPm');\r\n");
      out.write("            const startTime = document.getElementById('startTime');\r\n");
      out.write("            const endAmPm = document.getElementById('endAmPm');\r\n");
      out.write("            const endTime = document.getElementById('endTime');\r\n");
      out.write("            \r\n");
      out.write("            allDayCheckbox.addEventListener('change', function() {\r\n");
      out.write("                if (this.checked) {\r\n");
      out.write("                    startAmPm.value = '오전';\r\n");
      out.write("                    startTime.value = '12:00';\r\n");
      out.write("                    endAmPm.value = '오후';\r\n");
      out.write("                    endTime.value = '11:59';\r\n");
      out.write("                    startAmPm.disabled = true;\r\n");
      out.write("                    startTime.disabled = true;\r\n");
      out.write("                    endAmPm.disabled = true;\r\n");
      out.write("                    endTime.disabled = true;\r\n");
      out.write("                } else {\r\n");
      out.write("                    startAmPm.disabled = false;\r\n");
      out.write("                    startTime.disabled = false;\r\n");
      out.write("                    endAmPm.disabled = false;\r\n");
      out.write("                    endTime.disabled = false;\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // 해시태그 기능\r\n");
      out.write("            const hashtagInput = document.getElementById('hashtagInput');\r\n");
      out.write("            const hashtagList = document.getElementById('hashtagList');\r\n");
      out.write("            const hashtagValues = document.getElementById('hashtagValues');\r\n");
      out.write("            let hashtags = [];\r\n");
      out.write("            \r\n");
      out.write("            // 해시태그 입력 처리\r\n");
      out.write("            hashtagInput.addEventListener('keypress', function(e) {\r\n");
      out.write("                if (e.key === 'Enter') {\r\n");
      out.write("                    e.preventDefault();\r\n");
      out.write("                    \r\n");
      out.write("                    let tagText = this.value.trim();\r\n");
      out.write("                    if (!tagText) return;\r\n");
      out.write("                    \r\n");
      out.write("                    // # 없으면 추가\r\n");
      out.write("                    if (!tagText.startsWith('#')) {\r\n");
      out.write("                        tagText = '#' + tagText;\r\n");
      out.write("                    }\r\n");
      out.write("                    \r\n");
      out.write("                    // 중복 방지\r\n");
      out.write("                    if (!hashtags.includes(tagText)) {\r\n");
      out.write("                        addHashtag(tagText);\r\n");
      out.write("                        this.value = '';\r\n");
      out.write("                    } else {\r\n");
      out.write("                        alert('이미 추가된 태그입니다.');\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // 해시태그 추가 함수\r\n");
      out.write("            function addHashtag(tag) {\r\n");
      out.write("                hashtags.push(tag);\r\n");
      out.write("                \r\n");
      out.write("                const tagElement = document.createElement('div');\r\n");
      out.write("                tagElement.className = 'hashtag';\r\n");
      out.write("                tagElement.innerHTML = `\r\n");
      out.write("                    ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${tag}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("                    <span class=\"remove\">&times;</span>\r\n");
      out.write("                `;\r\n");
      out.write("                \r\n");
      out.write("                const removeButton = tagElement.querySelector('.remove');\r\n");
      out.write("                removeButton.addEventListener('click', function() {\r\n");
      out.write("                    hashtagList.removeChild(tagElement);\r\n");
      out.write("                    hashtags = hashtags.filter(t => t !== tag);\r\n");
      out.write("                    updateHashtagValues();\r\n");
      out.write("                });\r\n");
      out.write("                \r\n");
      out.write("                hashtagList.appendChild(tagElement);\r\n");
      out.write("                updateHashtagValues();\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 해시태그 hidden input 업데이트\r\n");
      out.write("            function updateHashtagValues() {\r\n");
      out.write("                hashtagValues.value = hashtags.join(',');\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 폼 제출 전 유효성 검사\r\n");
      out.write("            document.getElementById('eventForm').addEventListener('submit', function(e) {\r\n");
      out.write("                const eventTitle = document.getElementById('eventTitle').value;\r\n");
      out.write("                if (!eventTitle.trim()) {\r\n");
      out.write("                    e.preventDefault();\r\n");
      out.write("                    alert('일정 제목을 입력해주세요.');\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                // 여기에 더 많은 유효성 검사를 추가할 수 있습니다\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
