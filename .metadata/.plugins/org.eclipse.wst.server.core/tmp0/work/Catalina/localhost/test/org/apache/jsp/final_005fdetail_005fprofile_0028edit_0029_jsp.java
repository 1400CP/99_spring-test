/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.99
 * Generated at: 2025-04-21 08:27:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class final_005fdetail_005fprofile_0028edit_0029_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>프로필 편집</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        * {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("            font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        body {\r\n");
      out.write("            background-color: #f5f5f5;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .container {\r\n");
      out.write("            max-width: 600px;\r\n");
      out.write("            margin: 0 auto;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .profile-header {\r\n");
      out.write("            background-color: #86e0f9;\r\n");
      out.write("            height: 150px;\r\n");
      out.write("            position: relative;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .profile-content {\r\n");
      out.write("            background-color: #9f9fd6;\r\n");
      out.write("            padding: 70px 20px 20px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .profile-image {\r\n");
      out.write("            width: 100px;\r\n");
      out.write("            height: 100px;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            position: absolute;\r\n");
      out.write("            left: 50%;\r\n");
      out.write("            top: 100px;\r\n");
      out.write("            transform: translateX(-50%);\r\n");
      out.write("            border: 3px solid white;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .profile-image img {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            object-fit: cover;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .profile-name {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: white;\r\n");
      out.write("            font-size: 24px;\r\n");
      out.write("            margin-top: 10px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .edit-form {\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-title {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-title svg {\r\n");
      out.write("            margin-right: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-group {\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-group label {\r\n");
      out.write("            display: block;\r\n");
      out.write("            margin-bottom: 5px;\r\n");
      out.write("            color: #666;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-control {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-row {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .form-row .form-group {\r\n");
      out.write("            flex: 1;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .button-group {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            gap: 10px;\r\n");
      out.write("            justify-content: flex-end;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .btn {\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .btn-primary {\r\n");
      out.write("            background-color: #02c8fa;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        .btn-cancel {\r\n");
      out.write("            background-color: white;\r\n");
      out.write("            color: #333;\r\n");
      out.write("            border: 1px solid #ddd;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"profile-header\"></div>\r\n");
      out.write("        <div class=\"profile-content\">\r\n");
      out.write("            <div class=\"profile-image\">\r\n");
      out.write("                <img src=\"/api/placeholder/100/100\" alt=\"프로필 이미지\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <h1 class=\"profile-name\">이름을차디</h1>\r\n");
      out.write("            \r\n");
      out.write("            <div class=\"edit-form\">\r\n");
      out.write("                <div class=\"form-title\">\r\n");
      out.write("                    <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n");
      out.write("                        <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\" fill=\"#333\"/>\r\n");
      out.write("                    </svg>\r\n");
      out.write("                    <h2>프로필 편집</h2>\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label>이름</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" placeholder=\"진술\" id=\"name\">\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"form-row\">\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <label>연락처</label>\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" placeholder=\"진술\" id=\"contact\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"form-group\">\r\n");
      out.write("                        <label>이메일</label>\r\n");
      out.write("                        <input type=\"email\" class=\"form-control\" placeholder=\"진술\" id=\"email\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label>비밀번호</label>\r\n");
      out.write("                    <input type=\"password\" class=\"form-control\" placeholder=\"진술\" id=\"password\">\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label>비밀번호 확인</label>\r\n");
      out.write("                    <input type=\"password\" class=\"form-control\" placeholder=\"진술\" id=\"passwordConfirm\">\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"form-group\">\r\n");
      out.write("                    <label>상태메시지</label>\r\n");
      out.write("                    <input type=\"text\" class=\"form-control\" placeholder=\"진술\" id=\"status\">\r\n");
      out.write("                </div>\r\n");
      out.write("                \r\n");
      out.write("                <div class=\"button-group\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-primary\" id=\"saveBtn\">수정</button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-cancel\" id=\"cancelBtn\">취소</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("            // DOM 요소 가져오기\r\n");
      out.write("            const saveBtn = document.getElementById('saveBtn');\r\n");
      out.write("            const cancelBtn = document.getElementById('cancelBtn');\r\n");
      out.write("            const nameInput = document.getElementById('name');\r\n");
      out.write("            const contactInput = document.getElementById('contact');\r\n");
      out.write("            const emailInput = document.getElementById('email');\r\n");
      out.write("            const passwordInput = document.getElementById('password');\r\n");
      out.write("            const passwordConfirmInput = document.getElementById('passwordConfirm');\r\n");
      out.write("            const statusInput = document.getElementById('status');\r\n");
      out.write("            \r\n");
      out.write("            // 프로필 데이터 로드 (예시)\r\n");
      out.write("            function loadProfileData() {\r\n");
      out.write("                // 실제 구현에서는 AJAX 요청을 통해 서버에서 데이터를 가져옵니다.\r\n");
      out.write("                const userData = {\r\n");
      out.write("                    name: '이름을차디',\r\n");
      out.write("                    contact: '010-1234-5678',\r\n");
      out.write("                    email: 'example@email.com',\r\n");
      out.write("                    status: '안녕하세요!'\r\n");
      out.write("                };\r\n");
      out.write("                \r\n");
      out.write("                // 폼에 데이터 설정\r\n");
      out.write("                nameInput.value = userData.name;\r\n");
      out.write("                contactInput.value = userData.contact;\r\n");
      out.write("                emailInput.value = userData.email;\r\n");
      out.write("                statusInput.value = userData.status;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 초기 데이터 로드\r\n");
      out.write("            loadProfileData();\r\n");
      out.write("            \r\n");
      out.write("            // 저장 버튼 클릭 이벤트\r\n");
      out.write("            saveBtn.addEventListener('click', function() {\r\n");
      out.write("                if (validateForm()) {\r\n");
      out.write("                    saveProfileData();\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // 취소 버튼 클릭 이벤트\r\n");
      out.write("            cancelBtn.addEventListener('click', function() {\r\n");
      out.write("                if (confirm('변경사항을 취소하시겠습니까?')) {\r\n");
      out.write("                    window.history.back();\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // 폼 유효성 검사\r\n");
      out.write("            function validateForm() {\r\n");
      out.write("                // 이름 검사\r\n");
      out.write("                if (nameInput.value.trim() === '') {\r\n");
      out.write("                    alert('이름을 입력해주세요.');\r\n");
      out.write("                    nameInput.focus();\r\n");
      out.write("                    return false;\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                // 이메일 형식 검사\r\n");
      out.write("                const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n");
      out.write("                if (emailInput.value.trim() !== '' && !emailRegex.test(emailInput.value)) {\r\n");
      out.write("                    alert('유효한 이메일 주소를 입력해주세요.');\r\n");
      out.write("                    emailInput.focus();\r\n");
      out.write("                    return false;\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                // 비밀번호 일치 검사\r\n");
      out.write("                if (passwordInput.value !== '' && passwordInput.value !== passwordConfirmInput.value) {\r\n");
      out.write("                    alert('비밀번호와 비밀번호 확인이 일치하지 않습니다.');\r\n");
      out.write("                    passwordConfirmInput.focus();\r\n");
      out.write("                    return false;\r\n");
      out.write("                }\r\n");
      out.write("                \r\n");
      out.write("                return true;\r\n");
      out.write("            }\r\n");
      out.write("            \r\n");
      out.write("            // 프로필 데이터 저장\r\n");
      out.write("            function saveProfileData() {\r\n");
      out.write("                // 저장할 데이터 객체 생성\r\n");
      out.write("                const profileData = {\r\n");
      out.write("                    name: nameInput.value.trim(),\r\n");
      out.write("                    contact: contactInput.value.trim(),\r\n");
      out.write("                    email: emailInput.value.trim(),\r\n");
      out.write("                    password: passwordInput.value,\r\n");
      out.write("                    status: statusInput.value.trim()\r\n");
      out.write("                };\r\n");
      out.write("                \r\n");
      out.write("                // 실제 구현에서는 AJAX를 사용하여 서버에 데이터를 전송합니다.\r\n");
      out.write("                console.log('저장할 프로필 데이터:', profileData);\r\n");
      out.write("                \r\n");
      out.write("                // 성공적으로 저장되었다고 가정\r\n");
      out.write("                alert('프로필이 성공적으로 수정되었습니다.');\r\n");
      out.write("                \r\n");
      out.write("                // 프로필 페이지로 이동 (JSP 환경에 따라 경로 조정 필요)\r\n");
      out.write("                // window.location.href = 'profile.jsp';\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
